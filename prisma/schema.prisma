generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Recipe {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  description    String
  imageURL       String
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  favouriteItems FavouriteItem[]

  @@map("recipes")
}

model Favourite {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  items     FavouriteItem[]
  userId    String?         @db.ObjectId
  user      User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("favourites")
}

model FavouriteItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  recipeId    String    @db.ObjectId
  recipe      Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  quantity    Int       @default(1)
  favouriteId String    @db.ObjectId
  favourite   Favourite @relation(fields: [favouriteId], references: [id], onDelete: Cascade)

  @@map("favouriteitems")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  favourites    Favourite[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}